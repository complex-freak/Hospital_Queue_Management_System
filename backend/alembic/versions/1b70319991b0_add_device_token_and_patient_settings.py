"""add_device_token_and_patient_settings

Revision ID: 1b70319991b0
Revises: 9dea795668ed
Create Date: 2025-06-17 19:33:38.003451

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1b70319991b0'
down_revision: Union[str, None] = '9dea795668ed'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum types
    op.execute("CREATE TYPE urgencylevel AS ENUM ('LOW', 'NORMAL', 'HIGH', 'EMERGENCY');")
    op.execute("CREATE TYPE auditresource AS ENUM ('USER', 'PATIENT', 'DOCTOR', 'APPOINTMENT', 'QUEUE', 'SYSTEM');")
    
    op.create_table('device_tokens',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('patient_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('token', sa.String(length=512), nullable=False),
    sa.Column('device_type', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('fk_device_tokens_patient_id_patients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_device_tokens'))
    )
    op.create_table('patient_settings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('patient_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=True),
    sa.Column('sms_notifications', sa.Boolean(), nullable=True),
    sa.Column('email_notifications', sa.Boolean(), nullable=True),
    sa.Column('push_notifications', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('fk_patient_settings_patient_id_patients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_patient_settings')),
    sa.UniqueConstraint('patient_id', name=op.f('uq_patient_settings_patient_id'))
    )
    op.drop_index('ix_auditlog_actor_id', table_name='auditlog')
    op.drop_index('ix_auditlog_event_time', table_name='auditlog')
    op.drop_index('ix_auditlog_event_type', table_name='auditlog')
    op.drop_table('auditlog')
    op.add_column('appointments', sa.Column('urgency', sa.Enum('LOW', 'NORMAL', 'HIGH', 'EMERGENCY', name='urgencylevel'), nullable=True))
    op.alter_column('appointments', 'created_by',
               existing_type=postgresql.UUID(),
               nullable=True)
    op.alter_column('appointments', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('appointments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('appointments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_appointments_appointment_date', table_name='appointments')
    op.drop_index('ix_appointments_doctor_id', table_name='appointments')
    op.drop_index('ix_appointments_patient_id', table_name='appointments')
    op.drop_index('ix_appointments_status', table_name='appointments')
    op.drop_constraint('fk_appointments_patient_id_patients', 'appointments', type_='foreignkey')
    op.create_foreign_key(op.f('fk_appointments_patient_id_patients'), 'appointments', 'patients', ['patient_id'], ['id'])
    op.drop_column('appointments', 'appointment_time')
    op.drop_column('appointments', 'urgency_level')
    op.drop_column('appointments', 'symptoms')
    op.add_column('audit_log', sa.Column('user_type', sa.String(length=20), nullable=False))
    op.add_column('audit_log', sa.Column('resource', sa.Enum('USER', 'PATIENT', 'DOCTOR', 'APPOINTMENT', 'QUEUE', 'SYSTEM', name='auditresource'), nullable=False))
    op.add_column('audit_log', sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('audit_log', sa.Column('details', sa.Text(), nullable=True))
    op.alter_column('audit_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_audit_log_action', table_name='audit_log')
    op.drop_index('ix_audit_log_created_at', table_name='audit_log')
    op.drop_index('ix_audit_log_entity_type', table_name='audit_log')
    op.drop_index('ix_audit_log_patient_id', table_name='audit_log')
    op.drop_index('ix_audit_log_user_id', table_name='audit_log')
    op.drop_constraint('fk_audit_log_user_id_users', 'audit_log', type_='foreignkey')
    op.drop_constraint('fk_audit_log_patient_id_patients', 'audit_log', type_='foreignkey')
    op.drop_column('audit_log', 'old_values')
    op.drop_column('audit_log', 'patient_id')
    op.drop_column('audit_log', 'entity_type')
    op.drop_column('audit_log', 'entity_id')
    op.drop_column('audit_log', 'new_values')
    op.add_column('doctors', sa.Column('department', sa.String(length=100), nullable=True))
    op.alter_column('doctors', 'is_available',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_index('ix_doctors_user_id', table_name='doctors')
    op.create_unique_constraint(op.f('uq_doctors_user_id'), 'doctors', ['user_id'])
    op.drop_constraint('fk_doctors_user_id_users', 'doctors', type_='foreignkey')
    op.create_foreign_key(op.f('fk_doctors_user_id_users'), 'doctors', 'users', ['user_id'], ['id'])
    op.drop_column('doctors', 'created_at')
    op.drop_column('doctors', 'updated_at')
    op.alter_column('notifications', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_notifications_appointment_id', table_name='notifications')
    op.drop_index('ix_notifications_patient_id', table_name='notifications')
    op.drop_index('ix_notifications_status', table_name='notifications')
    op.drop_index('ix_notifications_type', table_name='notifications')
    op.drop_constraint('fk_notifications_appointment_id_appointments', 'notifications', type_='foreignkey')
    op.drop_constraint('fk_notifications_patient_id_patients', 'notifications', type_='foreignkey')
    op.create_foreign_key(op.f('fk_notifications_patient_id_patients'), 'notifications', 'patients', ['patient_id'], ['id'])
    op.drop_column('notifications', 'channel')
    op.drop_column('notifications', 'appointment_id')
    op.add_column('patients', sa.Column('emergency_contact', sa.String(length=20), nullable=True))
    op.alter_column('patients', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('patients', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('patients', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint('uq_patients_phone_number', 'patients', type_='unique')
    op.drop_column('patients', 'emergency_contact_phone')
    op.drop_column('patients', 'medical_history')
    op.alter_column('queue', 'priority_score',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('queue', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('queue', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('queue', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_queue_appointment_id', table_name='queue')
    op.drop_index('ix_queue_priority_score', table_name='queue')
    op.drop_index('ix_queue_queue_number', table_name='queue')
    op.drop_index('ix_queue_status', table_name='queue')
    op.drop_constraint('fk_queue_appointment_id_appointments', 'queue', type_='foreignkey')
    op.create_foreign_key(op.f('fk_queue_appointment_id_appointments'), 'queue', 'appointments', ['appointment_id'], ['id'])
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('ix_users_role', table_name='users')
    op.drop_constraint('uq_users_username', 'users', type_='unique')
    op.drop_column('users', 'phone_number')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.create_unique_constraint('uq_users_username', 'users', ['username'])
    op.create_index('ix_users_role', 'users', ['role'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_constraint(op.f('fk_queue_appointment_id_appointments'), 'queue', type_='foreignkey')
    op.create_foreign_key('fk_queue_appointment_id_appointments', 'queue', 'appointments', ['appointment_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_queue_status', 'queue', ['status'], unique=False)
    op.create_index('ix_queue_queue_number', 'queue', ['queue_number'], unique=False)
    op.create_index('ix_queue_priority_score', 'queue', ['priority_score'], unique=False)
    op.create_index('ix_queue_appointment_id', 'queue', ['appointment_id'], unique=False)
    op.alter_column('queue', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('queue', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('queue', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('queue', 'priority_score',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.add_column('patients', sa.Column('medical_history', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patients', sa.Column('emergency_contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.create_unique_constraint('uq_patients_phone_number', 'patients', ['phone_number'])
    op.alter_column('patients', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('patients', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('patients', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column('patients', 'emergency_contact')
    op.add_column('notifications', sa.Column('appointment_id', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('notifications', sa.Column('channel', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_notifications_patient_id_patients'), 'notifications', type_='foreignkey')
    op.create_foreign_key('fk_notifications_patient_id_patients', 'notifications', 'patients', ['patient_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('fk_notifications_appointment_id_appointments', 'notifications', 'appointments', ['appointment_id'], ['id'], ondelete='SET NULL')
    op.create_index('ix_notifications_type', 'notifications', ['type'], unique=False)
    op.create_index('ix_notifications_status', 'notifications', ['status'], unique=False)
    op.create_index('ix_notifications_patient_id', 'notifications', ['patient_id'], unique=False)
    op.create_index('ix_notifications_appointment_id', 'notifications', ['appointment_id'], unique=False)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('notifications', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.add_column('doctors', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('doctors', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_doctors_user_id_users'), 'doctors', type_='foreignkey')
    op.create_foreign_key('fk_doctors_user_id_users', 'doctors', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('uq_doctors_user_id'), 'doctors', type_='unique')
    op.create_index('ix_doctors_user_id', 'doctors', ['user_id'], unique=False)
    op.alter_column('doctors', 'is_available',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column('doctors', 'department')
    op.add_column('audit_log', sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_log', sa.Column('entity_id', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('audit_log', sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('audit_log', sa.Column('patient_id', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('audit_log', sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_foreign_key('fk_audit_log_patient_id_patients', 'audit_log', 'patients', ['patient_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_audit_log_user_id_users', 'audit_log', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_index('ix_audit_log_user_id', 'audit_log', ['user_id'], unique=False)
    op.create_index('ix_audit_log_patient_id', 'audit_log', ['patient_id'], unique=False)
    op.create_index('ix_audit_log_entity_type', 'audit_log', ['entity_type'], unique=False)
    op.create_index('ix_audit_log_created_at', 'audit_log', ['created_at'], unique=False)
    op.create_index('ix_audit_log_action', 'audit_log', ['action'], unique=False)
    op.alter_column('audit_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('audit_log', 'details')
    op.drop_column('audit_log', 'resource_id')
    op.drop_column('audit_log', 'resource')
    op.drop_column('audit_log', 'user_type')
    op.add_column('appointments', sa.Column('symptoms', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('appointments', sa.Column('urgency_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('appointments', sa.Column('appointment_time', postgresql.TIME(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_appointments_patient_id_patients'), 'appointments', type_='foreignkey')
    op.create_foreign_key('fk_appointments_patient_id_patients', 'appointments', 'patients', ['patient_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_appointments_status', 'appointments', ['status'], unique=False)
    op.create_index('ix_appointments_patient_id', 'appointments', ['patient_id'], unique=False)
    op.create_index('ix_appointments_doctor_id', 'appointments', ['doctor_id'], unique=False)
    op.create_index('ix_appointments_appointment_date', 'appointments', ['appointment_date'], unique=False)
    op.alter_column('appointments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('appointments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('appointments', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('appointments', 'created_by',
               existing_type=postgresql.UUID(),
               nullable=False)
    op.drop_column('appointments', 'urgency')
    op.create_table('auditlog',
    sa.Column('log_id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('actor_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('log_id', name='pk_auditlog')
    )
    op.create_index('ix_auditlog_event_type', 'auditlog', ['event_type'], unique=False)
    op.create_index('ix_auditlog_event_time', 'auditlog', ['event_time'], unique=False)
    op.create_index('ix_auditlog_actor_id', 'auditlog', ['actor_id'], unique=False)
    op.drop_table('patient_settings')
    op.drop_table('device_tokens')
    
    # Drop enum types
    op.execute("DROP TYPE IF EXISTS urgencylevel;")
    op.execute("DROP TYPE IF EXISTS auditresource;")
    # ### end Alembic commands ###
