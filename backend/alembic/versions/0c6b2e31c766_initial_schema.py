"""Initial schema

Revision ID: 0c6b2e31c766
Revises: acf30b03052d
Create Date: 2025-06-12 02:27:25.651255

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID


# revision identifiers, used by Alembic.
revision: str = '0c6b2e31c766'
down_revision: Union[str, None] = 'acf30b03052d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables exist before creating them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Only create tables if they don't exist
    if 'auditlog' not in existing_tables:
        op.create_table('auditlog',
        sa.Column('log_id', UUID(), nullable=False),
        sa.Column('event_type', sa.String(length=50), nullable=False),
        sa.Column('actor_id', UUID(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('event_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('log_id')
        )
        op.create_index(op.f('ix_auditlog_actor_id'), 'auditlog', ['actor_id'], unique=False)
        op.create_index(op.f('ix_auditlog_event_time'), 'auditlog', ['event_time'], unique=False)
        op.create_index(op.f('ix_auditlog_event_type'), 'auditlog', ['event_type'], unique=False)
    
    # Skip creating patients table as it already exists
    
    if 'users' not in existing_tables:
        op.create_table('users',
        sa.Column('user_id', UUID(), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('role', sa.Enum('doctor', 'receptionist', 'admin', name='user_roles'), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint('user_id')
        )
        op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
        op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    if 'appointments' not in existing_tables:
        op.create_table('appointments',
        sa.Column('appointment_id', UUID(), nullable=False),
        sa.Column('patient_id', UUID(), nullable=True),
        sa.Column('scheduled_date', sa.Date(), nullable=False),
        sa.Column('scheduled_time', sa.Time(), nullable=False),
        sa.Column('urgency_level', sa.Enum('low', 'medium', 'high', name='urgency_level'), nullable=False),
        sa.Column('created_by', UUID(), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
        sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
        sa.PrimaryKeyConstraint('appointment_id')
        )
        op.create_index('ix_appointments_date_time', 'appointments', ['scheduled_date', 'scheduled_time'], unique=False)
        op.create_index(op.f('ix_appointments_scheduled_date'), 'appointments', ['scheduled_date'], unique=False)
        op.create_index(op.f('ix_appointments_urgency_level'), 'appointments', ['urgency_level'], unique=False)
    
    if 'doctors' not in existing_tables:
        op.create_table('doctors',
        sa.Column('doctor_id', UUID(), nullable=False),
        sa.Column('user_id', UUID(), nullable=True),
        sa.Column('specialty', sa.String(length=50), nullable=True),
        sa.Column('available_today', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
        sa.PrimaryKeyConstraint('doctor_id')
        )
        op.create_index(op.f('ix_doctors_available_today'), 'doctors', ['available_today'], unique=False)
    
    if 'notifications' not in existing_tables:
        op.create_table('notifications',
        sa.Column('notification_id', UUID(), nullable=False),
        sa.Column('appointment_id', UUID(), nullable=True),
        sa.Column('channel', sa.Enum('sms', 'push', name='notification_channel'), nullable=False),
        sa.Column('message', sa.Text(), nullable=False),
        sa.Column('sent_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('status', sa.Enum('success', 'failed', name='notification_status'), nullable=False),
        sa.ForeignKeyConstraint(['appointment_id'], ['appointments.appointment_id'], ),
        sa.PrimaryKeyConstraint('notification_id')
        )
        op.create_index(op.f('ix_notifications_status'), 'notifications', ['status'], unique=False)
    
    if 'queue' not in existing_tables:
        op.create_table('queue',
        sa.Column('queue_id', UUID(), nullable=False),
        sa.Column('appointment_id', UUID(), nullable=True),
        sa.Column('queue_number', sa.String(length=10), nullable=False),
        sa.Column('priority_score', sa.Integer(), nullable=False),
        sa.Column('status', sa.Enum('waiting', 'notified', 'served', 'skipped', name='queue_status'), nullable=False),
        sa.Column('check_in_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('served_time', sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(['appointment_id'], ['appointments.appointment_id'], ),
        sa.PrimaryKeyConstraint('queue_id')
        )
        op.create_index(op.f('ix_queue_priority_score'), 'queue', ['priority_score'], unique=False)
        op.create_index(op.f('ix_queue_queue_number'), 'queue', ['queue_number'], unique=False)
        op.create_index(op.f('ix_queue_status'), 'queue', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()
    
    if 'queue' in existing_tables:
        op.drop_index(op.f('ix_queue_status'), table_name='queue')
        op.drop_index(op.f('ix_queue_queue_number'), table_name='queue')
        op.drop_index(op.f('ix_queue_priority_score'), table_name='queue')
        op.drop_table('queue')
    
    if 'notifications' in existing_tables:
        op.drop_index(op.f('ix_notifications_status'), table_name='notifications')
        op.drop_table('notifications')
    
    if 'doctors' in existing_tables:
        op.drop_index(op.f('ix_doctors_available_today'), table_name='doctors')
        op.drop_table('doctors')
    
    if 'appointments' in existing_tables:
        op.drop_index(op.f('ix_appointments_urgency_level'), table_name='appointments')
        op.drop_index(op.f('ix_appointments_scheduled_date'), table_name='appointments')
        op.drop_index('ix_appointments_date_time', table_name='appointments')
        op.drop_table('appointments')
    
    if 'users' in existing_tables:
        op.drop_index(op.f('ix_users_username'), table_name='users')
        op.drop_index(op.f('ix_users_role'), table_name='users')
        op.drop_table('users')
    
    # Skip dropping patients table as it was created in a previous migration
    
    if 'auditlog' in existing_tables:
        op.drop_index(op.f('ix_auditlog_event_type'), table_name='auditlog')
        op.drop_index(op.f('ix_auditlog_event_time'), table_name='auditlog')
        op.drop_index(op.f('ix_auditlog_actor_id'), table_name='auditlog')
        op.drop_table('auditlog')
    # ### end Alembic commands ###
